// Parent class
class Shape {
    // Method overloading in Shape class
    public void area() {
        System.out.println("Calculating area of a generic shape.");
    }

    public void area(int side) {
        System.out.println("Calculating area of a square with side " + side + ": " + (side * side));
    }
}

// Subclass Circle
class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    // Overriding the area method
    @Override
    public void area() {
        double result = Math.PI * radius * radius;
        System.out.println("Area of Circle: " + result);
    }
}

// Subclass Rectangle
class Rectangle extends Shape {
    private double length, width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    // Overriding the area method
    @Override
    public void area() {
        double result = length * width;
        System.out.println("Area of Rectangle: " + result);
    }
}

// Subclass Triangle
class Triangle extends Shape {
    private double base, height;

    public Triangle(double base, double height) {
        this.base = base;
        this.height = height;
    }

    // Overriding the area method
    @Override
    public void area() {
        double result = 0.5 * base * height;
        System.out.println("Area of Triangle: " + result);
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Demonstrate method overloading
        Shape genericShape = new Shape();
        genericShape.area();
        genericShape.area(4);

        // Demonstrate method overriding
        Shape circle = new Circle(5.0);
        circle.area();

        Shape rectangle = new Rectangle(4.0, 6.0);
        rectangle.area();

        Shape triangle = new Triangle(3.0, 8.0);
        triangle.area();
    }
}
